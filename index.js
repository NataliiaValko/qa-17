// Example 1 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
// –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:

// createProduct(obj, callback) - –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É –±–µ–∑ id, –∞ —Ç–∞–∫–æ–∂ –∫–æ–ª–ª–±–µ–∫. –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É, –¥–æ–¥–∞—é—á–∏ –π–æ–º—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å id —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–ª–±–µ–∫ –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±'—î–∫—Ç.
// logProduct(product) - –∫–æ–ª–±–±–µ–∫ –ø—Ä–∏–π–º–∞—é—á–∏–π –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—é—á–∏–π –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å
// logTotalPrice(product) - –∫–æ–ª–±–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—ñ—é—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å
// function createProduct(obj, callback) {
//   const product = { ...obj, id: Date.now() };
//   callback(product);
// }

// function logProduct(product) {
//   console.log(product);
// }

// function logTotalPrice(product) {
//   console.log(product.price * product.quantity);
// }
// createProduct({ name: "banana", price: 100, quantity: 15 }, logProduct);
// createProduct({ name: "banana", price: 100, quantity: 15 }, logTotalPrice);
// createProduct({ name: "cherry", price: 150, quantity: 2 }, logProduct);
// createProduct({ name: "cherry", price: 150, quantity: 2 }, logTotalPrice);

// Example 2 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
// –î–æ–¥–∞–π—Ç–µ –æ–±'—î–∫—Ç account –º–µ—Ç–æ–¥–∏ withdraw(amount, onSuccess, onError) —Ç–∞ deposit(amount, onSuccess, onError), –¥–µ –ø–µ—Ä—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ü–µ —Å—É–º–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó, –∞ –¥—Ä—É–≥–∏–π —Ç–∞ —Ç—Ä–µ—Ç—ñ–π - –∫–æ–ª–ª–±–µ–∫–∏.

// –ú–µ—Ç–æ–¥ withdraw –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT ("Amount should not exceed {TRANSACTION_LIMIT} credits") –∞–±–æ this.balance ("Amount can't exceed account balance of {this.balance} credits"), —ñ onSuccess ("Account balance: {this.balance}") —Ç–∞ –∑–º—ñ–Ω—É –±–∞–ª–∞–Ω—Å–∞ –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.

// –ú–µ—Ç–æ–¥ deposit –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT ("Amount should not exceed {TRANSACTION_LIMIT} credits") –∞–±–æ –º–µ–Ω—à–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é ("Amount must be more than 0 credits"), —ñ onSuccess ("Account balance: {this.balance}") —Ç–∞ –∑–º—ñ–Ω—É –±–∞–ª–∞–Ω—Å–∞ –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.

// –†—ñ—à–µ–Ω–Ω—è
// const TRANSACTION_LIMIT = 1000;

// const account = {
//   username: "Jacob",
//   balance: 400,
//   withdraw(amount, onSuccess, onError) {
//     if (amount > TRANSACTION_LIMIT) {
//       onError(`${amount} should not exceed ${TRANSACTION_LIMIT} credits`);
//       return;
//     }
//     if (amount > this.balance) {
//       onError(
//         `${amount} can't exceed account balance of ${this.balance} credits`
//       );
//       return;
//     }
//     this.balance -= amount;
//     onSuccess(`Account balance: ${this.balance}`);
//   },
//   deposit(amount, onSuccess, onError) {
//     if (amount > TRANSACTION_LIMIT) {
//       onError(`${amount} should not exceed ${TRANSACTION_LIMIT} credits`);
//       return;
//     }
//     if (amount <= 0) {
//       onError(`Amount must be more than 0 credits`);
//       return;
//     }
//     this.balance += amount;
//     onSuccess(`Account balance: ${this.balance}`);
//   },
// };

// function handleSuccess(message) {
//   console.log(`‚úÖ üôÇ Success! ${message}`);
// }
// function handleError(message) {
//   console.log(`‚ùå Error! ${message}`);
// }

// account.withdraw(2000, handleSuccess, handleError);
// account.withdraw(600, handleSuccess, handleError);
// account.withdraw(300, handleSuccess, handleError);
// account.deposit(1700, handleSuccess, handleError);
// account.deposit(0, handleSuccess, handleError);
// account.deposit(-600, handleSuccess, handleError);
// account.deposit(600, handleSuccess, handleError);
// Example 3 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
//
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é each(array, callback), —è–∫–∞ –ø–µ—Ä—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ—á—ñ–∫—É—î –º–∞—Å–∏–≤, –∞ –¥—Ä—É–≥–∏–º - —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É. –§—É–Ω–∫—Ü—ñ—è each –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ —è–∫–æ–≥–æ –±—É–¥—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–∫–ª–∏–∫—É –∫–æ–ª–ª–±–µ–∫–∞.
// function each(array, callback) {
//   return array.map((element) => callback(element));
// }

// function double(element) {
//   return element * 2;
// }
// each([1, 2, 3, 4, 5, 6], double);
// console.log(
//   "each([1, 2, 3, 4, 5, 6], double);:",
//   each([1, 2, 3, 4, 5, 6], double)
// );

// –†—ñ—à–µ–Ω–Ω—è
// function each(array, callback) {}

// console.log(
//   each([64, 49, 36, 25, 16], function (value) {
//     return value * 2;
//   }),
// );
// console.log(
//   each([64, 49, 36, 25, 16], function (value) {
//     return value - 10;
//   }),
// );
// console.log(
//   each([64, 49, 36, 25, 16], function (value) {
//     return Math.sqrt(value);
//   }),
// );
// console.log(
//   each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//     return Math.ceil(value);
//   }),
// );
// console.log(
//   each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//     return Math.floor(value);
//   }),
// );

// Example 4 - –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.

// const createProduct = (partialProduct, callback) => {
//   const product = { id: Date.now(), ...partialProduct };
//   callback(product);
// };

// const logProduct = (product) => {
//   console.log(product);
// };

// const logTotalPrice = (product) => {
//   console.log(product.price * product.quantity);
// };

// createProduct({ name: "üçé", price: 30, quantity: 3 }, logProduct);
// createProduct({ name: "üçã", price: 20, quantity: 5 }, logTotalPrice);
//
// Example 5 - –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.

// const TRANSACTION_LIMIT = 1000;

// const account = {
//   username: "Jacob",
//   balance: 400,
//   withdraw(amount, onSuccess, onError) {
//     if (amount > TRANSACTION_LIMIT) {
//       onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`);
//     } else if (amount > this.balance) {
//       onError(`Amount can't exceed account balance of ${this.balance} credits`);
//     } else {
//       this.balance -= amount;
//       onSuccess(`Account balance: ${this.balance}`);
//     }
//   },
//   deposit(amount, onSuccess, onError) {
//     if (amount > TRANSACTION_LIMIT) {
//       onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`);
//     } else if (amount <= 0) {
//       onError(`Amount must be more than 0 credits`);
//     } else {
//       this.balance += amount;
//       onSuccess(`Account balance: ${this.balance}`);
//     }
//   },
// };

// const handleSuccess = (message) => {
//   console.log(`‚úÖ Success! ${message}`);
// };
// const handleError = (message) => {
//   console.log(`‚ùå Error! ${message}`);
// };

// account.withdraw(2000, handleSuccess, handleError);
// account.withdraw(600, handleSuccess, handleError);
// account.withdraw(300, handleSuccess, handleError);
// account.deposit(1700, handleSuccess, handleError);
// account.deposit(0, handleSuccess, handleError);
// account.deposit(-600, handleSuccess, handleError);
// account.deposit(600, handleSuccess, handleError);

// Example 6 - –Ü–Ω–ª–∞–π–Ω —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.

// const each = (array, callback) => {
//   const newArr = [];
//   for (const el of array) {
//     newArr.push(callback(el));
//   }
//   return newArr;
// };

// console.log(each([64, 49, 36, 25, 16], (value) => value * 2));
// console.log(each([64, 49, 36, 25, 16], (value) => value - 10));
// console.log(each([64, 49, 36, 25, 16], (value) => Math.sqrt(value)));
// console.log(each([1.5, 2.1, 16.4, 9.7, 11.3], (value) => Math.ceil(value)));
// console.log(each([1.5, 2.1, 16.4, 9.7, 11.3], (value) => Math.floor(value)));

const cars = [
  {
    make: "Honda",
    model: "CR-V",
    type: "suv",
    amount: 14,
    price: 24045,
    onSale: true,
  },
  {
    make: "Honda",
    model: "Accord",
    type: "sedan",
    amount: 2,
    price: 22455,
    onSale: true,
  },
  {
    make: "Mazda",
    model: "Mazda 6",
    type: "sedan",
    amount: 8,
    price: 24195,
    onSale: false,
  },
  {
    make: "Mazda",
    model: "CX-9",
    type: "suv",
    amount: 7,
    price: 31520,
    onSale: true,
  },
  {
    make: "Toyota",
    model: "4Runner",
    type: "suv",
    amount: 19,
    price: 34210,
    onSale: false,
  },
  {
    make: "Toyota",
    model: "Sequoia",
    type: "suv",
    amount: 16,
    price: 45560,
    onSale: false,
  },
  {
    make: "Toyota",
    model: "Tacoma",
    type: "truck",
    amount: 4,
    price: 24320,
    onSale: true,
  },
  {
    make: "Ford",
    model: "F-150",
    type: "truck",
    amount: 11,
    price: 27110,
    onSale: true,
  },
  {
    make: "Ford",
    model: "Fusion",
    type: "sedan",
    amount: 13,
    price: 22120,
    onSale: true,
  },
  {
    make: "Ford",
    model: "Explorer",
    type: "suv",
    amount: 6,
    price: 31660,
    onSale: false,
  },
];

// Example 7 - –ú–µ—Ç–æ–¥ map
// –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è getModels –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –º–æ–¥–µ–ª–µ–π (–ø–æ–ª–µ model) –≤—Å—ñ—Ö –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤.

// const getModels = (cars) => cars.map(({ model }) => model);

// console.table(getModels(cars));
// Example 8 - –ú–µ—Ç–æ–¥ map
// –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è makeCarsWithDiscount –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ —ñ–∑ –∑–º—ñ–Ω–Ω–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ price –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–µ—Ä–µ–¥–∞–Ω–æ—ó –∑–Ω–∏–∂–∫–∏.

// const makeCarsWithDiscount = (cars, discount) => {
//   return cars.map((element) => ({
//     ...element,
//     price: element.price - element.price * discount,
//   }));
// };

// console.table(makeCarsWithDiscount(cars, 0.2));
// console.table(makeCarsWithDiscount(cars, 0.4));
// Example 9 - –ú–µ—Ç–æ–¥ filter
// –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è filterByPrice –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ —Ü—ñ–Ω–∞ —è–∫–∏—Ö –º–µ–Ω—à–∞ –Ω—ñ–∂ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ threshold.

// const filterByPrice = (cars, threshold) => {
//   return cars.filter((element) => element.price < threshold);
// };

// console.table(filterByPrice(cars, 30000));
// console.table(filterByPrice(cars, 25000));
// Example 10 - –ú–µ—Ç–æ–¥ filter
// –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è getCarsWithDiscount –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å onSale —è–∫–∏—Ö true.

// const getCarsWithDiscount = (cars) =>  cars.filter((element) => element.onSale);

// console.table(getCarsWithDiscount(cars));
// Example 11 - –ú–µ—Ç–æ–¥ filter
// –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è getCarsWithType –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ —Ç–∏–ø —è–∫–∏—Ö –∑–±—ñ–≥–∞—î—Ç—å—Å—è –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ type.

// const getCarsWithType = (cars, type) => {
//   return cars.filter((element) => element.type === type);
// };

// console.table(getCarsWithType(cars, "suv"));
// console.table(getCarsWithType(cars, "sedan"));
// Example 12 - –ú–µ—Ç–æ–¥ find
// const getCarByModel = (cars, model) => cars.find((el) => el.model === model);

// console.log(getCarByModel(cars, "F-150"));
// console.log(getCarByModel(cars, "CX-9"));

// Example 13 - –ú–µ—Ç–æ–¥ reduce
// –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è getTotalAmount –ø–æ–≤–µ—Ä—Ç–∞—î –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ (–∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π amount).

// const getTotalAmount = (cars) =>
//   cars.reduce((acc, el) => (acc += el.amount), 0);

// console.log(getTotalAmount(cars));
// Example 14 - –õ–∞–Ω—Ü—é–∂–∫–∏ –º–µ—Ç–æ–¥—ñ–≤
// –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è getModelsOnSale –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –º–æ–¥–µ–ª–µ–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤, –∞–ª–µ —Ç—ñ–ª—å–∫–∏ —Ç–∏—Ö, —è–∫—ñ –∑–∞—Ä–∞–∑ –Ω–∞ —Ä–æ–∑–ø—Ä–æ–¥–∞–∂—ñ.

//1 var
// const getModelsOnSale = (cars) => {
//   return cars.filter((el) => el.onSale).map((el) => el.model);
// };

//2 var
// const getModelsOnSale = (cars) =>
//   cars.filter(({ onSale }) => onSale).map(({ model }) => model);

//3 var
// const getModelsOnSale = (cars) =>
//   cars.reduce((acc, el) => {
//     if (el.onSale) {
//       acc.push(el.model);
//     }
//     return acc;
//   }, []);
// console.table(getModelsOnSale(cars));
